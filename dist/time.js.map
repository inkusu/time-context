{"version":3,"file":"time.js","sourceRoot":"","sources":["../src/time.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AACrC,iCAAiC;AAEjC,qCAAoC;AACpC,MAAM,MAAM,GAAG,iBAAa,CAAC,UAAU,CAAC,CAAC;AAOzC,MAAM,UAAU,GAAG,CAAC,KAAa,EAAE,GAAW,EAAiB,EAAE;IAC7D,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;IAEvC,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9B,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;IAEnC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;IACvG,OAAO,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;AACtC,CAAC,CAAC;AAGF,MAAqB,WAAW;IAO5B,YAAmB,IAAY,EAAE,EAAU;QAFjC,YAAO,GAAY,IAAI,CAAC;QAG9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QAEb,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACrC,CAAC;IAEM,gBAAgB;QACnB,MAAM,QAAQ,GAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,MAAM,EAAE,CAAC;QAC/D,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAC;YACjD,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;SAChC;IACL,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,QAAQ,GAAG,GAAG,EAAE,GAAE,CAAC;QAEpC,IAAG,IAAI,CAAC,OAAO;YAAE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;;YACjC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAE7B,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,UAAU,CAAC,CAAC;QACvC,MAAM,MAAM,GAAG,MAAM,QAAQ,EAAE,CAAC;QAChC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAE3B,OAAO,MAAM,CAAC;IAClB,CAAC;CAEJ;AAnCD,8BAmCC","sourcesContent":["import * as MockDate from 'mockdate';\nimport * as moment from 'moment';\n\nimport loggerFactory from '~logger';\nconst logger = loggerFactory(__filename);\n\n/**\n * start end間でランダム時間を一つ生成する\n * @param start\n * @param end\n */\nconst randomDate = (start: string, end: string): moment.Moment => {\n    const startDate = new Date(start);\n    startDate.setTime(startDate.getTime());\n\n    const endDate = new Date(end);\n    endDate.setTime(endDate.getTime());\n\n    const date = new Date(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime()));\n    return moment(date.toISOString());\n};\n\n\nexport default class TimeContext {\n\n    protected from:string;\n    protected to:string;\n    protected time:moment.Moment;\n    protected isFirst: boolean = true;\n\n    public constructor(from: string, to: string) {\n        this.from = from;\n        this.to = to;\n\n        this.time = randomDate(from, to);\n    }\n\n    public setIncrementTime() {\n        const nextTime =  moment(this.time).add(1, 'minutes').format();\n        if( moment(this.time).isBetween(this.from, nextTime)){\n            this.time = moment(nextTime);\n        }\n    }\n\n    public async context(callback = () => {}): Promise<any> {\n\n        if(this.isFirst) this.isFirst = false;\n        else this.setIncrementTime();\n\n        MockDate.set(this.time);\n        logger.info(`時刻を${this.time}に設定しました。`);\n        const result = await callback();\n        MockDate.reset();\n        logger.info('時刻をクリアしました。');\n\n        return result;\n    }\n\n}\n\n"]}